#!/usr/bin/env python

import collections as _c
import functools as _ft
import re as _re
import sys as _sys
import typing as _t


BotID = str
BotSpec = dict[str, list[int] | tuple[str, str] | None]
# ex.
# {
#   'inputs':   [],
#   'outputs':  None,
# },
# {
#   'inputs':   [4, 9],
#   'outputs':  ('bot 2', 'output 0'),
# }
Factory = dict[BotID, BotSpec]

def _new_bot(inputs: list[int]=None, outputs: tuple[str, str]=None) -> BotSpec:
    if inputs is None:
        inputs = []
    return { 'inputs': inputs, 'outputs': outputs }


def _bot_input(
    bot_id: BotID,
    val: int,
    factory: Factory,
) -> Factory:
    bot = factory.get(bot_id)
    if bot is None:
        bot = _new_bot(inputs=[val])
        factory[bot_id] = bot
    else:
        if len(bot['inputs']) >= 2:
            return factory

        bot['inputs'].append(val)

    if _can_activate(bot):
        factory = _activate(bot, factory)

    return factory


def _bot_output(
    src: BotID,
    low_dest: BotID,
    high_dest: BotID,
    factory: Factory,
) -> Factory:
    bot = factory.get(src)
    if bot is None:
        bot = _new_bot(outputs=(low_dest, high_dest))
        factory[src] = bot
    else:
        bot['outputs'] = (low_dest, high_dest)

    if _can_activate(bot):
        factory = _activate(bot, factory)

    return factory


def _can_activate(bot: BotSpec) -> bool:
    return len(bot['inputs']) == 2 and bot['outputs'] is not None


def _activate(bot: BotSpec, factory: Factory):
    low_val = min(bot['inputs'])
    high_val = max(bot['inputs'])
    low_dest, high_dest = bot['outputs']

    factory = _bot_input(low_dest, low_val, factory)
    factory = _bot_input(high_dest, high_val, factory)

    return factory


def _parse_input(line: str) -> _t.Callable:
    pattern = r'value (\d+) .* (bot \d+)'
    val, bot = _re.fullmatch(pattern, line.strip()).groups()
    return _ft.partial(_bot_input, bot, int(val))


def _parse_output(line: str) -> _t.Callable:
    pattern = r'(bot \d+) .* low to (bot \d+|output \d+) .* high to (bot \d+|output \d+)'
    src, low_dest, high_dest = _re.fullmatch(pattern, line.strip()).groups()
    return _ft.partial(_bot_output, src, low_dest, high_dest)


def _parse(line: str) -> _t.Callable:
    if line.strip().startswith('value'):
        return _parse_input(line)
    else:
        return _parse_output(line)


def solve1(filename: str) -> int:
    with open(filename) as file:
        instructions = [_parse(line) for line in file]
    factory = {}
    for instruction in instructions:
        factory = instruction(factory)

    for bot_id, bot in factory.items():
        if 61 in bot['inputs'] and 17 in bot['inputs']:
            return int(bot_id.split()[1])


def solve2(filename: str) -> int:
    with open(filename) as file:
        instructions = [_parse(line) for line in file]
    factory = {}
    for instruction in instructions:
        factory = instruction(factory)

    return (
        factory['output 0']['inputs'][0]
        * factory['output 1']['inputs'][0]
        * factory['output 2']['inputs'][0]
    )


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
