#!/usr/bin/env python

import hashlib as _h
import sys as _sys


def solve1(seed: str) -> str:
    code = ''
    prefix = '0' * 5
    suffix = 0
    while len(code) < 8:
        s = f'{seed}{suffix}'.encode('utf8')
        digest = _h.md5(s).hexdigest()
        if digest.startswith(prefix):
            code = code + digest[5]
        suffix += 1

    return code


def solve2(seed: str) -> str:
    code = '_' * 8
    valid_positions = set(str(x) for x in range(len(code)))
    prefix = '0' * 5
    suffix = -1
    while '_' in code:
        suffix += 1
        s = f'{seed}{suffix}'.encode('utf8')
        digest = _h.md5(s).hexdigest()
        if digest.startswith(prefix):
            if digest[5] not in valid_positions:
                continue
            pos = int(digest[5])
            char = digest[6]

            if code[pos] == '_':
                code = code[:pos] + char + code[pos+1:]

    return code


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 SEED")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    seed = _sys.argv[2]

    if part == '1':
        print(solve1(seed))
    elif part == '2':
        print(solve2(seed))
    else:
        return usage()


if __name__ == '__main__':
    main()
