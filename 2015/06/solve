#!/usr/bin/env python

import sys


def binary(number: int, digits: int=0, reverse=False) -> str:
    bits = f"{{:0{digits}b}}".format(number)
    if reverse:
        return bits[::-1]
    else:
        return bits


def bitmask(low: int, high: int) -> int:
    return (1 << high+1) - 1 ^ (1 << low) - 1


class BitGrid():
    def __init__(self, width: int, height: int):
        self.width = width
        self.height = height
        self.grid = self.height * [0]

    def on(self, coord_a: tuple[int, int], coord_b: tuple[int, int]):
        ax, ay = coord_a
        bx, by = coord_b
        assert(0 <= x < self.width for x in [ax, bx])
        assert(0 <= y < self.height for y in [ay, by])

        for y in range(min(ay, by), max(ay, by)+1):
            self.grid[y] |= bitmask(min(ax, bx), max(ax, bx))

    def off(self, coord_a: tuple[int, int], coord_b: tuple[int, int]):
        ax, ay = coord_a
        bx, by = coord_b
        assert(0 <= x < self.width for x in [ax, bx])
        assert(0 <= y < self.height for y in [ay, by])

        for y in range(min(ay, by), max(ay, by)+1):
            self.grid[y] &= ~bitmask(min(ax, bx), max(ax, bx))

    def toggle(self, coord_a: tuple[int, int], coord_b: tuple[int, int]):
        ax, ay = coord_a
        bx, by = coord_b
        assert(0 <= x < self.width for x in [ax, bx])
        assert(0 <= y < self.height for y in [ay, by])

        for y in range(min(ay, by), max(ay, by)+1):
            self.grid[y] ^= bitmask(min(ax, bx), max(ax, bx))

    def total(self):
        return sum(binary(row).count('1') for row in self.grid)

    def __str__(self):
        grid = [
            ' '.join(binary(line, digits=self.width, reverse=True))
            for line in self.grid
        ]
        return ('\n').join(str(line) for line in grid)


_commands1 = {
    "turn on": BitGrid.on,
    "turn off": BitGrid.off,
    "toggle": BitGrid.toggle,
}


def _parse_command(string: str, commands: dict) -> tuple[str, tuple[int, int], tuple[int, int]]:
    for cmd, fun in commands.items():
        if string.startswith(cmd):
            raw_coords = string.split(f"{cmd} ")[1].split(" through ")
            start = tuple(int(x) for x in raw_coords[0].split(','))
            end = tuple(int(x) for x in raw_coords[1].split(','))
            return fun, start, end


def solve1(filename: str) -> int:
    grid = BitGrid(1000, 1000)
    with open(filename) as file:
        for line in file:
            cmd, start, end = _parse_command(line, _commands1)
            cmd(grid, start, end)
    return grid.total()


class IntGrid():
    def __init__(self, width: int, height: int):
        self.width = width
        self.height = height
        self.grid = [[0,] * width] * height

    def on(self, coord_a, coord_b):
        x1 = min(coord_a[0], coord_b[0])
        x2 = max(coord_a[0], coord_b[0])
        y1 = min(coord_a[1], coord_b[1])
        y2 = max(coord_a[1], coord_b[1])
        assert(0 <= x < self.width for x in [x1, x2])
        assert(0 <= y < self.height for y in [y1, y2])

        for y in range(y1, y2+1):
            row = self.grid[y]
            self.grid[y] = (
                row[:x1]
                + [ n+1 for n in row[x1:x2+1] ]
                + row[x2+1:]
            )

    def off(self, coord_a, coord_b):
        x1 = min(coord_a[0], coord_b[0])
        x2 = max(coord_a[0], coord_b[0])
        y1 = min(coord_a[1], coord_b[1])
        y2 = max(coord_a[1], coord_b[1])
        assert(0 <= x < self.width for x in [x1, x2])
        assert(0 <= y < self.height for y in [y1, y2])

        for y in range(y1, y2+1):
            row = self.grid[y]
            self.grid[y] = (
                row[:x1]
                + [ max(0, n-1) for n in row[x1:x2+1] ]
                + row[x2+1:]
            )

    def toggle(self, coord_a, coord_b):
        x1 = min(coord_a[0], coord_b[0])
        x2 = max(coord_a[0], coord_b[0])
        y1 = min(coord_a[1], coord_b[1])
        y2 = max(coord_a[1], coord_b[1])
        assert(0 <= x < self.width for x in [x1, x2])
        assert(0 <= y < self.height for y in [y1, y2])

        for y in range(y1, y2+1):
            row = self.grid[y]
            self.grid[y] = (
                row[:x1]
                + [ n+2 for n in row[x1:x2+1] ]
                + row[x2+1:]
            )

    def total(self):
        return sum(sum(row) for row in self.grid)

    def __str__(self):
        return '\n'.join(
            ' '.join(str(num) for num in row) for row in self.grid
        )


_commands2 = {
    "turn on": IntGrid.on,
    "turn off": IntGrid.off,
    "toggle": IntGrid.toggle,
}


def solve2(filename: str) -> int:
    grid = IntGrid(1000, 1000)
    with open(filename) as file:
        for line in file:
            cmd, start, end = _parse_command(line, _commands2)
            cmd(grid, start, end)
    return grid.total()


def usage():
    print(f"usage: {sys.argv[0]} 1|2 FILE")


def main():
    if len(sys.argv) != 3:
        usage()
        return

    part = sys.argv[1]
    filename = sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        usage()


if __name__ == '__main__':
    main()
