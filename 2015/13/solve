#!/usr/bin/env python

import collections as _c
import itertools as _it
import re as _re
import sys as _sys
import typing as _t


Pairing = _c.namedtuple('Pairing', ['person', 'neighbour', 'change'])

def _parse(line: str) -> Pairing:
    person, sign, abs_change, neighbour = _re.fullmatch(
        '(\w+) would (gain|lose) (\d+) happiness units by sitting next to (\w+).',
        line.strip(),
    ).groups()

    if sign == 'gain':
        change = int(abs_change)
    else:
        change = -int(abs_change)

    return Pairing(person, neighbour, change)


def _happiness_matrix(pairing: list[Pairing]) -> dict[str, dict[str, int]]:
    people = set()
    happiness = _c.defaultdict(dict)
    for person, neighbour, change in pairing:
        people.add(person)
        people.add(neighbour)
        happiness[person][neighbour] = change
    return people, happiness


T = _t.TypeVar('T')
def _happiest_seating(
    people: _c.abc.Iterable[T],
    happiness: dict[T, dict[T, int]]
) -> int:
    result = None
    for pairing in _it.permutations(people):
        total_happiness = 0
        for i in range(-1, len(pairing) - 1):
            person, neighbour = (pairing[i], pairing[i+1])
            total_happiness += happiness[person][neighbour]
            total_happiness += happiness[neighbour][person]

        if result is None or total_happiness > result:
            result = total_happiness

    return result


def solve1(filename: str) -> int:
    with open(filename) as file:
        pairings: list[Pairing] = [_parse(line) for line in file]
    people, happiness = _happiness_matrix(pairings)
    return _happiest_seating(people, happiness)


def solve2(filename: str) -> int:
    with open(filename) as file:
        pairings: list[Pairing] = [_parse(line) for line in file]
    people, happiness = _happiness_matrix(pairings)
    for p in people:
        happiness['me'][p] = 0
        happiness[p]['me'] = 0
    people.add('me')
    return _happiest_seating(people, happiness)


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
