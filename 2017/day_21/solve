#!/usr/bin/env python

import sys as _sys
import typing as _t


Image = tuple[str, ...]
_seed = (
    '.#.',
    '..#',
    '###',
)


def _print(image: Image):
    for row in image:
        print(row)


def _parse(line: str) -> tuple[Image, Image]:
    image, enhanced = line.strip().split(' => ')
    return (
        tuple(image.split('/')),
        tuple(enhanced.split('/')),
    )


def _load(filename: str) -> dict[Image, Image]:
    with open(filename) as file:
        return dict(_parse(line) for line in file)


def _flip_d(image: Image) -> Image:
    return tuple(''.join(x) for x in zip(*image))


def _flip_h(image: Image) -> Image:
    return tuple(row[::-1] for row in image)


def _variants(image: Image) -> _t.Generator[Image, None, None]:
    for _ in range(4):
        yield image
        image = _flip_h(image)
        yield image
        image = _flip_d(image)


def _enhance_tile(tile: Image, rules: dict[Image, Image]) -> Image:
    for variant in _variants(tile):
        if variant in rules:
            return rules[variant]
    assert False


def _tile(image: Image) -> list[list[Image]]:
    assert len(image) == len(image[0])
    width = len(image)
    divided_image = []
    if width % 2 == 0:
        # divide in 2x2
        for y in range(width // 2):
            row = []
            for x in range(width // 2):
                tile = (
                    image[y*2][x*2:x*2+2],
                    image[y*2+1][x*2:x*2+2],
                )
                row.append(tile)
            divided_image.append(row)
    elif width % 3 == 0:
        # divide in 3x3
        for y in range(width // 3):
            row = []
            for x in range(width // 3):
                tile = (
                    image[y*3][x*3:x*3+3],
                    image[y*3+1][x*3:x*3+3],
                    image[y*3+2][x*3:x*3+3],
                )
                row.append(tile)
            divided_image.append(row)
    else:
        assert False
    return divided_image


def _stitch(tiles: list[list[Image]]) -> Image:
    image = []
    for tile_row in tiles:
        tile_height = len(tile_row[0])
        for row in range(tile_height):
            image.append(''.join(tile[row] for tile in tile_row))
    return tuple(image)


def _enhance(image: Image, rules: dict[Image, Image]) -> Image:
    tiled = _tile(image)
    enhanced = [
        [_enhance_tile(tile, rules) for tile in tile_row]
        for tile_row in tiled
    ]
    return _stitch(enhanced)


def _pixels(image: Image) -> int:
    return sum(row.count('#') for row in image)


def solve1(filename: str) -> int:
    rules = _load(filename)
    image = _seed
    for i in range(5):
        image = _enhance(image, rules)
    return _pixels(image)


def solve2(filename: str) -> int:
    rules = _load(filename)
    image = _seed
    for i in range(18):
        image = _enhance(image, rules)
    return _pixels(image)


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
