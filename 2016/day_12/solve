#!/usr/bin/env python

import sys as _sys


def _eval(cmd: tuple[str, ...], registers: dict[str, int]) -> int | None:
    if cmd[0] == 'cpy':
        _, x, y = cmd
        registers[y] = int(registers.get(x, x))
    elif cmd[0] == 'inc':
        _, x = cmd
        registers[x] += 1
    elif cmd[0] == 'dec':
        _, x = cmd
        registers[x] -= 1
    elif cmd[0] == 'jnz':
        _, x, y = cmd
        if int(registers.get(x, x)) != 0:
            return int(y)
    else:
        assert False


def _run(program: list[tuple[str, ...]], registers: dict[str, int], ic: int):
    while 0 <= ic < len(program):
        jmp = _eval(program[ic], registers)
        ic = ic + 1 if jmp is None else ic + jmp


def _parse(line: str) -> tuple[str, ...]:
    return line.strip().split()


def solve1(filename: str) -> int:
    with open(filename) as file:
        program = [_parse(line) for line in file]
    registers = {'a': 0, 'b': 0, 'c': 0, 'd': 0}
    _run(program, registers, 0)
    return registers['a']


def solve2(filename: str) -> int:
    with open(filename) as file:
        program = [_parse(line) for line in file]
    registers = {'a': 0, 'b': 0, 'c': 1, 'd': 0}
    _run(program, registers, 0)
    return registers['a']


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
