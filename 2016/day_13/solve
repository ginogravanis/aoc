#!/usr/bin/env python

import queue as _q
import sys as _sys


Pos = tuple[int, int]


def _is_walkable(x: int, y: int, seed: int) -> bool:
    if x < 0 or y < 0:
        return False

    one_count = bin(x*x + 3*x + 2*x*y + y + y*y + seed).count('1')
    return one_count % 2 == 0


def _possible_moves(pos: Pos, seed: int) -> list[Pos]:
    x, y = pos
    return [
        move for move in
        [
            (x, y-1),
            (x+1, y),
            (x, y+1),
            (x-1, y),
        ]
        if _is_walkable(*move, seed)
    ]


def _min_distance(start: Pos, end: Pos, seed: int) -> int:
    dist = {start: 0}
    nodes = _q.PriorityQueue()
    nodes.put((0, start))
    while not nodes.empty():
        prev_dist, prev_pos = nodes.get()
        cur_dist = dist[prev_pos] + 1
        for move in _possible_moves(prev_pos, seed):
            if move == end:
                return cur_dist

            best_dist = dist.get(move, float('inf'))
            if cur_dist < best_dist:
                dist[move] = cur_dist
                nodes.put((cur_dist, move))


def _reachable_positions(start: Pos, max_moves: int, seed: int) -> set[Pos]:
    visited = {start}
    nodes = _q.PriorityQueue()
    nodes.put((0, start))
    while not nodes.empty():
        prev_dist, prev_pos = nodes.get()
        if prev_dist >= max_moves:
            break

        for pos in _possible_moves(prev_pos, seed):
            if pos not in visited:
                visited.add(pos)
                nodes.put((prev_dist + 1, pos))

    return visited


def solve1(seed: int) -> int:
    start = (1, 1)
    end = (31, 39)
    return _min_distance(start, end, seed)


def solve2(seed: int) -> int:
    start = (1, 1)
    return len(_reachable_positions(start, 50, seed))


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 SEED")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    seed = int(_sys.argv[2])

    if part == '1':
        print(solve1(seed))
    elif part == '2':
        print(solve2(seed))
    else:
        return usage()


if __name__ == '__main__':
    main()
