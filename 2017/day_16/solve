#!/usr/bin/env python

import collections as _c
import functools as _ft
import sys as _sys


Spin: tuple[int] = _c.namedtuple(
    'Spin',
    ['n'],
)
Exchange: tuple[int, int] = _c.namedtuple(
    'Exchange',
    ['pos1', 'pos2'],
)
Partner: tuple[str, str] = _c.namedtuple(
    'Partner',
    ['char1', 'char2'],
)
Move = Spin | Exchange | Partner


def _parse(move: str) -> Move:
    move = move.strip()
    if move.startswith('s'):
        return Spin(int(move[1:]))
    elif move.startswith('x'):
        return Exchange(*sorted(int(x) for x in move[1:].split('/')))
    elif move.startswith('p'):
        return Partner(*sorted(move[1:].split('/')))
    else:
        assert False


def _load(filename: str) -> list[Move]:
    with open(filename) as file:
        return [_parse(move) for move in file.read().split(',')]


@_ft.singledispatch
def _step(spin: Spin, lineup: str) -> str:
    return lineup[-spin.n:] + lineup[:-spin.n]


@_step.register
def _(exchange: Exchange, lineup: str) -> str:
    return (lineup[:exchange.pos1]
            + lineup[exchange.pos2]
            + lineup[exchange.pos1+1:exchange.pos2]
            + lineup[exchange.pos1]
            + lineup[exchange.pos2+1:]
            )


@_step.register
def _(partner: Partner, lineup: str) -> str:
    return (lineup
            .replace(partner.char1, '.')
            .replace(partner.char2, partner.char1)
            .replace('.', partner.char2)
            )


def _dance(lineup: str, moves: list[Move]) -> str:
    return _ft.reduce(
        lambda lineup_, move: _step(move, lineup_),
        moves,
        lineup,
    )


def _cycle_count(lineup: str, moves: list[Move]) -> int:
    initial_lineup = lineup
    count = 0
    while True:
        lineup = _dance(lineup, moves)
        count += 1
        if lineup == initial_lineup:
            return count


def solve1(filename: str) -> int:
    moves = _load(filename)
    lineup = ''.join(chr(ord('a') + i) for i in range(16))
    return _dance(lineup, moves)


def solve2(filename: str) -> str:
    moves = _load(filename)
    lineup = ''.join(chr(ord('a') + i) for i in range(16))
    cycle_count = _cycle_count(lineup, moves)
    for _ in range(int(1e9) % cycle_count):
        lineup = _dance(lineup, moves)
    return lineup


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
