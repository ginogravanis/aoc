#!/usr/bin/env python

import collections as _c
import re as _re
import sys as _sys


Ingredient = _c.namedtuple(
    'Ingredient',
    [
        'name',
        'capacity',
        'durability',
        'flavor',
        'texture',
        'calories',
    ],
)


def _parse(line: str) -> dict:
    name, capacity, durability, flavor, texture, calories = _re.fullmatch(
        '(\w+): capacity (-?\d+), durability (-?\d+), flavor (-?\d+), texture (-?\d+), calories (-?\d+)',
        line.strip(),
    ).groups()
    return Ingredient(
        name,
        int(capacity),
        int(durability),
        int(flavor),
        int(texture),
        int(calories),
    )


def _splits(amount: int, count: int) -> list[int]:
    if count <= 1:
        yield [amount]
    else:
        for i in range(amount + 1):
            for subsplit in _splits(amount - i, count - 1):
                yield [i] + subsplit


def _cookie_score(ingredients: list[Ingredient], amounts: list[int]) -> int:
    assert(len(ingredients) == len(amounts))
    attributes = set(Ingredient._fields) - set(['name', 'calories'])
    total_score = 1
    for attribute in attributes:
        total_score *= max(
            0,
            sum(
                val * amount
                for val, amount
                in zip(
                    [getattr(i, attribute) for i in ingredients],
                    amounts
                )
            ),
        )

    return total_score


def solve1(filename: str) -> int:
    with open(filename) as file:
        ingredients = [_parse(line) for line in file]

    max_score = None
    for split in _splits(100, len(ingredients)):
        score = _cookie_score(ingredients, split)

        if max_score is None or score > max_score:
            max_score = score

    return max_score


def _calorie_count(ingredients: list[Ingredient], amounts: list[int]) -> int:
    return sum(
        val * amount
        for val, amount
        in zip(
            [i.calories for i in ingredients],
            amounts,
        )
    )


def solve2(filename: str) -> int:
    with open(filename) as file:
        ingredients = [_parse(line) for line in file]

    max_score = None
    for split in _splits(100, len(ingredients)):
        score = _cookie_score(ingredients, split)
        kcal = _calorie_count(ingredients, split)

        if kcal != 500:
            continue

        if max_score is None or score > max_score:
            max_score = score

    return max_score


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
