#!/usr/bin/env python

import sys as _sys


def _skip_garbage(data: str, i: int) -> tuple[int, int]:
    garbage = 0
    while i < len(data):
        if data[i] == '>':
            return i, garbage
        elif data[i] == '!':
            i += 1
        else:
            garbage += 1
        i += 1
    assert False


def _parse_group(data: str, i: int = 0) -> tuple[int, list, int]:
    group = []
    total_garbage = 0
    while i < len(data):
        if data[i] == '{':
            end, subgroup, garbage = _parse_group(data, i+1)
            group.append(subgroup)
            total_garbage += garbage
            i = end + 1
        elif data[i] == '<':
            end, garbage = _skip_garbage(data, i+1)
            i = end + 1
            total_garbage += garbage
        elif data[i] == '}':
            return i, group, total_garbage
        elif data[i] == ',':
            i += 1
        else:
            assert False
    assert False


def _parse(data: str) -> tuple[list, int]:
    assert data[0] == '{'
    end, group, garbage = _parse_group(data, 1)
    assert end == len(data) - 1
    return group, garbage


def _score(group: list, val: int = 1) -> int:
    return val + sum(_score(elem, val + 1) for elem in group)


def solve1(filename: str) -> int:
    with open(filename) as file:
        group, _ = _parse(file.read().strip())
    return _score(group)


def solve2(filename: str) -> int:
    with open(filename) as file:
        _, garbage = _parse(file.read().strip())
    return garbage


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
