#!/usr/bin/env python

import collections as _c
import sys as _sys


Coord = _c.namedtuple(
    'Coord',
    ['x', 'y'],
)
_directions = [
    Coord(0, -1),  # north
    Coord(1, 0),  # east
    Coord(0, 1),  # south
    Coord(-1, 0),  # west
]
_clean = 0
_weakened = 1
_infected = 2
_flagged = 3


def _load(filename: str) -> set[Coord]:
    with open(filename) as file:
        grid = file.read().splitlines()
    origin = Coord(x=len(grid[0]) // 2, y=len(grid) // 2)
    infected = set()
    for y, row in enumerate(grid):
        for x, char in enumerate(row):
            if char == '#':
                infected.add(Coord(x=x-origin.x, y=y-origin.y))
    return infected


def _turn(direction: int, cw: bool = True) -> int:
    offset = 1 if cw else -1
    return (direction + offset) % len(_directions)


def _add(pos1: Coord, pos2: Coord) -> Coord:
    return Coord(x=pos1.x+pos2.x, y=pos1.y+pos2.y)


def _turn2(direction: int, cell_state: int) -> int:
    if cell_state == _clean:
        return _turn(direction, cw=False)
    elif cell_state == _weakened:
        return direction
    elif cell_state == _infected:
        return _turn(direction)
    elif cell_state == _flagged:
        return _turn(_turn(direction))
    else:
        assert False


def solve1(filename: str) -> int:
    infected = _load(filename)
    pos = Coord(0, 0)
    direction = 0
    infections_caused = 0
    for _ in range(int(1e4)):
        direction = _turn(direction, cw=pos in infected)
        if pos in infected:
            infected.remove(pos)
        else:
            infected.add(pos)
            infections_caused += 1
        pos = _add(pos, _directions[direction])
    return infections_caused


def solve2(filename: str) -> int:
    infected = _load(filename)
    cell_state = _c.defaultdict(int, {cell: _infected for cell in infected})
    pos = Coord(0, 0)
    direction = 0
    infections_caused = 0
    for _ in range(int(1e7)):
        current_cell = cell_state[pos]
        direction = _turn2(direction, current_cell)
        current_cell = (current_cell + 1) % 4
        if current_cell == _clean:
            del cell_state[pos]
        else:
            cell_state[pos] = current_cell
            if current_cell == _infected:
                infections_caused += 1
        pos = _add(pos, _directions[direction])
    return infections_caused


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
