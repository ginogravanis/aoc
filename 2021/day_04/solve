#!/usr/bin/env python

import sys as _sys


Board = dict[int, int]


def _split_by_new_lines(lines: list[str]) -> list[list[str]]:
    sections = []
    current_section = []
    for i in range(len(lines)):
        if lines[i].strip():
            current_section.append(lines[i])
        else:
            sections.append(current_section)
            current_section = []
    sections.append(current_section)
    return sections


def _parse_board(lines: list[str]) -> Board:
    board = {}
    for y, line in enumerate(lines):
        for x, num in enumerate(line.split()):
            board[int(num)] = 10*y + x
    return board


def _load(filename: str) -> tuple[list[int], list[Board]]:
    with open(filename) as file:
        sections = _split_by_new_lines(file.read().splitlines())
    numbers = [int(x) for x in sections[0][0].split(',')]
    boards = [_parse_board(section) for section in sections[1:]]
    return numbers, boards


def _board_score(board: Board, numbers: list[int]) -> tuple[int, int]:
    rows = [0] * 5
    cols = [0] * 5
    for i in range(len(numbers)):
        num = numbers[i]
        if num not in board:
            continue
        xy = board[num]
        rows[xy // 10] += 1
        cols[xy % 10] += 1
        if 5 in rows or 5 in cols:
            turns = i+1
            break
    else:
        turns = float('inf')

    unmarked_nums = set(board.keys()) - set(numbers[:turns])
    score = sum(unmarked_nums) * numbers[i]
    return turns, score


def solve1(filename: str) -> int:
    numbers, boards = _load(filename)
    board_scores = [_board_score(board, numbers) for board in boards]
    _, score = min(board_scores)
    return score


def solve2(filename: str) -> int:
    numbers, boards = _load(filename)
    board_scores = [_board_score(board, numbers) for board in boards]
    _, score = max(board_scores)
    return score


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print(solve2(filename))
    else:
        return usage()


if __name__ == '__main__':
    main()
