#!/usr/bin/env python

import collections as _c
import itertools as _it
import sys as _sys
import typing as _t


_DEBUG = False
Cmd = tuple[str, ...]


def _optimise_add(program: list[Cmd], start: int, end: int) -> bool:
    jmp = program[end]
    additions = _c.defaultdict(int)
    for i in range(start, end):
        cmd = program[i]
        if cmd[0] == 'inc':
            additions[cmd[1]] += 1
        elif cmd[0] == 'dec':
            additions[cmd[1]] -= 1
        else:
            return False

    loop_counter = jmp[1]
    loop_counter_direction = additions.get(loop_counter)
    if len(additions) != 2 or loop_counter_direction not in (-1, 1):
        return False

    other, iterations = [(k, v) for k, v in additions.items() if k != loop_counter][0]
    if iterations != 1:
        return False

    program[start] = ('add', other, loop_counter)
    for i in range(start+1, end+1):
        program[i] = ('nop',)

    return True


def _optimise_mul(program: list[Cmd], start: int, end: int) -> bool:
    block = [cmd for cmd in program[start:end+1] if cmd[0] != 'nop']
    if len(block) != 4:
        return False

    cpy, add, count, jmp = block
    if cpy[0] != 'cpy' or add[0] != 'add' or count[0] not in ('inc', 'dec'):
        return False
    if any(cpy[1] in cmd for cmd in block[1:]):
        return False
    if cpy[2] != add[2]:
        return False
    if any(add[1] in cmd for cmd in [cpy, count, jmp]):
        return False
    if count[1] != jmp[1]:
        return False

    acc = add[1]
    factor1 = cpy[1]
    factor2 = count[1]
    program[start] = ('mul', acc, factor1, factor2)
    program[start+1] = ('cpy', 0, add[2])
    for i in range(start+2, end+1):
        program[i] = ('nop',)

    return True


def _diff(program, optimised) -> str:
    assert(len(program) == len(optimised))
    lines = [
        "     raw src        optimised",
        "     -------        ---------",
    ]
    for i in range(len(program)):
        line_nr = f'{i})'.ljust(5)
        src = ' '.join(str(s) for s in program[i]).ljust(11)
        opt = ' '.join(str(s) for s in optimised[i])
        separator = '    ' if program[i] == optimised[i] else '|   '
        lines.append(line_nr + src + separator + opt)
    return '\n'.join(lines)


def _optimise_unconditional_jump(program: list[Cmd], i: int):
    _, pred, dist = program[i]
    if int(pred) == 0:
        program[i] = ('nop',)
    else:
        program[i] = ('jmp', dist)
    return True


def _optimise(program: list[Cmd]) -> list[Cmd]:
    optimised = program[:]
    for i in range(len(optimised)):
        cmd = optimised[i]

        if cmd[0] == 'jnz':
            if not cmd[1].isalpha():
                _optimise_unconditional_jump(optimised, i)

            if not cmd[2].isalpha():
                _, dist = cmd[1], int(cmd[2])
                if dist < 0:
                    (_optimise_add(optimised, i+dist, i)
                        or _optimise_mul(optimised, i+dist, i)
                    )
    return optimised


def _run(
    program: list[Cmd],
    registers: dict[str, int],
    ic: int,
) -> _t.Generator[str, None, None]:
    optimised = _optimise(program)
    if _DEBUG:
        print(_diff(program, optimised))
        return
    while 0 <= ic < len(program):
        cmd = optimised[ic]
        if cmd[0] == 'nop':
            pass
        elif cmd[0] == 'cpy':
            _, x, y = cmd
            registers[y] = int(registers.get(x, x))
        elif cmd[0] == 'inc':
            _, x = cmd
            registers[x] += 1
        elif cmd[0] == 'dec':
            _, x = cmd
            registers[x] -= 1
        elif cmd[0] == 'add':
            _, x, y = cmd
            registers[x] += abs(registers[y])
            registers[y] = 0
        elif cmd[0] == 'mul':
            _, x, y, z = cmd
            registers[x] += int(registers.get(y, y)) * abs(int(registers.get(z, z)))
            registers[z] = 0
        elif cmd[0] == 'jmp':
            _, x = cmd
            ic += int(registers.get(x, x))
            continue
        elif cmd[0] == 'jnz':
            _, x, y = cmd
            if int(registers.get(x, x)) != 0:
                ic += int(registers.get(y, y))
                continue
        elif cmd[0] == 'out':
            _, x = cmd
            yield str(registers.get(x, x))
        else:
            assert(False)
        ic += 1


def _parse(line: str) -> Cmd:
    return line.strip().split()


def solve1(filename: str) -> int:
    with open(filename) as file:
        program = [_parse(line) for line in file]
    val = 0
    while True:
        registers = {'a': val, 'b': 0, 'c': 0, 'd': 0}
        sample = ''.join(_it.islice(_run(program, registers, 0), 32))
        if sample in '01'*20:
            break
        val += 1
    return val


def usage():
    print(f"usage: {_sys.argv[0]} 1|2 FILE")


def main():
    if len(_sys.argv) != 3:
        return usage()

    part = _sys.argv[1]
    filename = _sys.argv[2]

    if part == '1':
        print(solve1(filename))
    elif part == '2':
        print("The star atop the antenna begins to glow.")
    else:
        return usage()


if __name__ == '__main__':
    main()
